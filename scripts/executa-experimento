#!/bin/bash

# Arquivo: executa-experimento
box(){
    local LANG="" LC_ALL=""
    local sentence="$1"

    local ansi_re=$'\033\\[(1;31|1;32|1;33|1;36|1;95|0)m'
    local cleanedSentence=$(printf '%b' "$sentence" | sed -E $'s/\033\\[[0-9;]*m//g; s/^[[:space:]]*//; s/[[:space:]]*$//')

    local leftUpperCornerSymbol="╔"
    local rightUpperCornerSymbol="╗"
    local leftBottomCornerSymbol="╚"
    local rightBottomCornerSymbol="╝"
    local horizontalSymbol="═"
    local verticalSymbol="║"

    # Gets the bigger length
    local lineLength=0
    local currentLineLength=0
    while read -r line; do
        currentLineLength=${#line}
        if [ $currentLineLength -gt $lineLength ]; then
            lineLength=$currentLineLength
        fi

    done <<< "$cleanedSentence"

    # Adds two to create additional length
    local horizontalSpacing=$(($lineLength+2))

    # Create a horizontal line with horizontalSpacing length
    for pos in $(seq 1 $horizontalSpacing)
    do
        local horizontalLine=$horizontalSymbol$horizontalLine
    done

    # Draws the box with multiline text inside
    echo "$leftUpperCornerSymbol$horizontalLine$rightUpperCornerSymbol"
    echo "$verticalSymbol${horizontalLine//$horizontalSymbol/ }$verticalSymbol"

    local horizontalRightSpacing=0
    while read -r line && read -r cleanedLine <&3; do
        local additionalSpace=""
        lineLength=${#cleanedLine}
        horizontalRightSpacing=$((horizontalSpacing - lineLength - 2))
        for pos in $(seq 1 $horizontalRightSpacing); do
            additionalSpace=" $additionalSpace"
        done

        echo -e "$verticalSymbol $line $additionalSpace$verticalSymbol"
    done < <(printf '%s\n' "$sentence") 3< <(printf '%s\n' "$cleanedSentence")

    echo "$verticalSymbol${horizontalLine//$horizontalSymbol/ }$verticalSymbol"
    echo "$leftBottomCornerSymbol$horizontalLine$rightBottomCornerSymbol"
}

## Funções que tratam da receita de testes ##
obtem_nome_receita() {
    local conteudo_receita="$1"
    local nome_receita=""

    while IFS= read -r linha; do
        if [[ "$linha" =~ ^Nome= ]]; then
            nome_receita="${linha#Nome=}"
            break
        fi
    done <<< "$conteudo_receita"

    nome_receita=$(echo "$nome_receita" | sed 's/ \+/_/g' | tr -cd '[:alnum:]_')
    nome_receita=$(echo "$nome_receita" | sed 's/_\+$//')
    echo "$nome_receita"
}

obtem_descricao_receita() {
    local conteudo_receita="$1"
    local descricao=""

    while IFS= read -r linha; do
        if [[ "$linha" =~ ^Descricao= ]]; then
            descricao="${linha#Descricao=}"
            break
        fi
    done <<< "$conteudo_receita"

    echo "$descricao"
}

obtem_rodadas() {
    local conteudo_receita="$1"
    local rodadas=0

    while IFS= read -r linha; do
        if [[ "$linha" =~ ^Rodadas= ]]; then
            rodadas="${linha#Rodadas=}"
            break
        fi
    done <<< "$conteudo_receita"

    echo "$rodadas"
}

obtem_tempo_da_rodada() {
    local conteudo_receita="$1"
    local tempo_da_rodada=""

    while IFS= read -r linha; do
        if [[ "$linha" =~ ^TempoDaRodada= ]]; then
            tempo_da_rodada="${linha#TempoDaRodada=}"
            break
        fi
    done <<< "$conteudo_receita"

    echo "$tempo_da_rodada"
}

obtem_sumarizador() {
    local conteudo_receita="$1"
    local sumarizador=""

    while IFS= read -r linha; do
        if [[ "$linha" =~ ^Sumarizador= ]]; then
            sumarizador="${linha#Sumarizador=}"
            break
        fi
    done <<< "$conteudo_receita"

    echo "$sumarizador"
}

obtem_quantidade_testes() {
    local conteudo_receita="$1"
    local quantidade_testes=0

    while IFS= read -r linha; do
        if [[ "$linha" =~ ^\[Teste\]$ ]]; then
            ((quantidade_testes++))
        fi
    done <<< "$conteudo_receita"

    echo "$quantidade_testes"
}

obtem_nome_teste() {
    local conteudo_receita="$1"
    local numero_teste="$2"
    local nome_teste=""
    local contador=0
    local dentro_do_teste=0

    while IFS= read -r linha; do
        if [[ "$linha" =~ ^\[Teste\]$ ]]; then
            ((contador++))
            dentro_do_teste=1
            continue
        fi

        if [[ $dentro_do_teste -eq 1 && "$linha" == Nome=* ]]; then
            if [[ $contador -eq $numero_teste ]]; then
                nome_teste="${linha#Nome=}"
                break
            fi
            dentro_do_teste=0
        fi
    done <<< "$conteudo_receita"
    echo "$nome_teste"
}

obtem_nomes_testes() {
    local conteudo_receita="$1"
    local nomes_testes=()
    local contador=0
    local dentro_do_teste=0

    while IFS= read -r linha; do
        if [[ "$linha" =~ ^\[Teste\]$ ]]; then
            dentro_do_teste=1
            continue
        fi

        if [[ $dentro_do_teste -eq 1 && "$linha" == Nome=* ]]; then
            nomes_testes+=("${linha#Nome=}")
            dentro_do_teste=0
        fi
    done <<< "$conteudo_receita"

    echo "${nomes_testes[@]}" | tr ' ' '\n'
}

obtem_teste() {
    local conteudo_receita="$1"
    local nome_teste_informado="$2"
    local contador=0
    local dentro_do_teste=0
    preparo_antes=""
    preparo_depois=""
    comando_cliente=""
    comando_servidor=""

    while IFS= read -r linha; do
        # Detecta início de um teste
        if [[ "$linha" =~ ^\[Teste\]$ ]]; then
            dentro_do_teste=0
            continue
        fi

        if [[ "$linha" == Nome=* ]]; then
            if [[ "${linha#Nome=}" == "$nome_teste_informado" ]]; then
                dentro_do_teste=1
                nome_teste="${linha#Nome=}"
                continue
            fi
        fi

        if [[ $dentro_do_teste -eq 1 ]]; then
            if [[ "$linha" =~ ^\[Teste\]$ ]]; then
                break
            fi

            if [[ "$linha" == Descricao=* ]]; then
                descricao_teste="${linha#Descricao=}"
            elif [[ "$linha" == PreparoAntes=* ]]; then
                preparo_antes="${linha#PreparoAntes=}"
            elif [[ "$linha" == PreparoDepois=* ]]; then
                preparo_depois="${linha#PreparoDepois=}"
            elif [[ "$linha" == ComandoCliente=* ]]; then
                comando_cliente="${linha#ComandoCliente=}"
            elif [[ "$linha" == ComandoServidor=* ]]; then
                comando_servidor="${linha#ComandoServidor=}"
            fi
        fi
    done <<< "$conteudo_receita"
}
## Fim das funções que tratam da receita de testes ##

obtem_duracao_do_comando_iperf(){
    local comando_cliente="$1"
    local comando_iperf3_cliente=$(echo $comando_cliente | sed 's/.*\(iperf3 .*\)/\1/')

    echo $comando_iperf3_cliente | awk '{ while (match($0, /-t[ ]*([0-9]+)/, a)) { val=a[1]; $0=substr($0, RSTART+RLENGTH) } } END { if(val) print val }'
}

ajustes(){
    echo -e "\n${verde}Aplicando ajustes...${normal}\n"
}

verifica_dependencias(){
    # Verifica se as dependências do sistema necessárias estão instaladas
    dependencias=(numactl python3 jq)
    dependencia_faltante=()

    for dependencia in ${dependencias[@]}; do
        if ! command -v $dependencia &> /dev/null; then
            dependencia_faltante+=($dependencia)
        fi
    done

    if [ ${#dependencia_faltante[@]} -gt 0 ]; then
        echo -e "${vermelho}Erro: as dependências necessárias não estão instaladas:${normal}"
        for dependencia in ${dependencia_faltante[@]}; do
            echo -e "${vermelho}  - $dependencia${normal}"
        done
        exit 1
    fi

    # Verifica se as dependências do Python necessárias estão instaladas
    modulos=(pandas matplotlib.pyplot numpy sys json csv re)
    modulos_false=()

    for modulo in ${modulos[@]}; do
        if ! python3 -c "import $modulo" &> /dev/null; then
            modulos_false+=($modulo)
        fi
    done

    if [ ${#modulos_false[@]} -gt 0 ]; then
        echo -e "${vermelho}Erro: as dependências necessárias não estão instaladas:${normal}"
        for modulo in ${modulos_false[@]}; do
            echo -e "${vermelho}  - $modulo${normal}"
        done
        exit 1
    fi
}

# Executa o script que prepara o cenário
sobe_cenario(){
    local script_preparatorio="$1"

    bash $script_preparatorio > /dev/null 2>&1
}

mata_processos(){
    echo "Limpando processos antigos..."
    pkill -f iperf3 -9
}

contagem_regressiva(){
    valor_inicial=$1
    texto="$2"

    for i in $(seq $valor_inicial -1 1); do
        printf "\033[K"
        printf "$texto ${ciano}[Tempo restante: $i]${normal}\r"
        sleep 1
    done

    printf "\033[K"
    printf "$texto"
    echo
}

roda_teste(){
    local rodada_atual="$1"
    local comando_cliente="$2"
    local comando_servidor="$3"
    local duracao="$4"
    local nucleo_servidor=""
    local nucleo_cliente=""
    local nucleo=""
    local texto_banda=""
    local args_extras=""

    local comando_iperf3_cliente=$(echo $comando_cliente | sed 's/.*\(iperf3 .*\)/\1/')
    local comando_iperf3_servidor=$(echo $comando_servidor | sed 's/.*\(iperf3 .*\)/\1/')

    local banda=$(echo $comando_iperf3_cliente | awk '{ while (match($0, /-b[ ]*([0-9]+[MG]?)/, a)) { val=a[1]; $0=substr($0, RSTART+RLENGTH) } } END { if(val) print val }')
    local quantidade_fluxos=$(echo $comando_iperf3_cliente | awk '{ while (match($0, /-P[ ]*([0-9]+)/, a)) { val=a[1]; $0=substr($0, RSTART+RLENGTH) } } END { if(val) print val }')

    # Verificando se o comando do cliente possui o núcleo do servidor
    nucleo=$(echo $comando_iperf3_cliente | awk 'match($0, /-A[ ]*([0-9]+(,[0-9]+)*)/, a) { val=a[1] } END { if(val) print val }')

    if [ -n "$nucleo" ]; then
        # Se o núcleo estiver no formato "nucleo_cliente,nucleo_servidor"
        if [[ $nucleo =~ ^[0-9]+,[0-9]+$ ]]; then
            nucleo_cliente=$(echo $nucleo | cut -d',' -f1)
            nucleo_servidor=$(echo $nucleo | cut -d',' -f2)

            texto_nucleo_servidor=" no núcleo ${nucleo_servidor}"
        elif [[ $nucleo =~ ^[0-9]+$ ]]; then
            # Se houver apenas um número como valor do argumento -A
            nucleo_cliente=$nucleo
        fi

        texto_nucleo_cliente=" no núcleo ${nucleo_cliente}"
    fi

    if [ -z "$nucleo_servidor" ]; then
        # Verifica se o comando do servidor possui o núcleo do servidor
        nucleo_servidor=$(echo $comando_iperf3_servidor | awk 'match($0, /-A[ ]*([0-9]+(,[0-9]+)*)/, a) { val=a[1] } END { if(val) print val }')

        if [ -n "$nucleo_servidor" ]; then
            texto_nucleo_servidor=" no núcleo ${nucleo_servidor}"
        fi
    fi

    if [ -z "$banda" ]; then
        texto_banda=", sem limite de banda"
    else
        texto_banda=", com banda de ${banda}"
    fi

    echo -e "\n${verde}Executando a rodada $rodada_atual do teste de $duracao segundos${texto_banda}...${normal}\n"
    mkdir -p $dir_este_script/resultados/$apelido/rodada_$rodada_atual

    echo -e "${amarelo}Servidor iniciado${texto_nucleo_servidor}...${normal}"
    $comando_servidor -J --one-off -i 1 > $dir_este_script/resultados/$apelido/rodada_$rodada_atual/rodada_$rodada_atual-${apelido}-iperf3_server.json &

    sleep 1
    echo -e "${amarelo}Preparando o mpstat...${normal}"
    numactl -C 0 $dir_este_script/mpstat-trigger $duracao $dir_este_script/resultados/$apelido/rodada_$rodada_atual rodada_$rodada_atual-${apelido}-mpstat.log 2>/dev/null &

    sleep 1
    $comando_cliente $args_extras -J -i 1 -t $duracao > $dir_este_script/resultados/$apelido/rodada_$rodada_atual/rodada_$rodada_atual-${apelido}-iperf3_client.json &

    contagem_regressiva $duracao "${amarelo}Cliente iniciado${texto_nucleo_cliente}...${normal}"
    wait $(jobs -p)

    sleep 1
    # Processa os resultados para CSV
    $dir_este_script/iperf-json-to-csv $dir_este_script/resultados/$apelido/rodada_$rodada_atual/rodada_$rodada_atual-${apelido}-iperf3_server.json > $dir_este_script/resultados/$apelido/rodada_$rodada_atual/rodada_$rodada_atual-${apelido}-iperf3_server.csv 2>/dev/null

    $dir_este_script/iperf-json-to-csv $dir_este_script/resultados/$apelido/rodada_$rodada_atual/rodada_$rodada_atual-${apelido}-iperf3_client.json > $dir_este_script/resultados/$apelido/rodada_$rodada_atual/rodada_$rodada_atual-${apelido}-iperf3_client.csv 2>/dev/null

    cat $dir_este_script/resultados/$apelido/rodada_$rodada_atual/rodada_$rodada_atual-${apelido}-mpstat.log | $dir_este_script/mpstat_to_csv.py > $dir_este_script/resultados/$apelido/rodada_$rodada_atual/rodada_$rodada_atual-${apelido}-mpstat.csv
}

ajuda() {
    echo -e "\nUso: $0 [opções]\n"
    echo -e "Opções:"
    echo -e "  -a, --apelido          Apelido para a rodada"
    echo -e "  -t, --duracao          Duração do teste em segundos"
    echo -e "  -r, --rodadas          Número de rodadas a serem executadas"
    echo -e "  -c, --comando-cliente  Comando do cliente iperf3"
    echo -e "  -s, --comando-servidor Comando do servidor iperf3"
    echo -e "  --preparo-antes        Script a ser executado antes do teste"
    echo -e "  --receita              Arquivo de receita com os testes a serem executados"
    echo -e "  -h, --ajuda            Exibe esta ajuda"
}

# Processar os argumentos
while [[ $# -gt 0 ]]; do
    argumento=$1
    case $argumento in
        -a|--apelido)
            apelido=$2
            shift 2
            ;;
        -t|--duracao)
            argumento_duracao=$2
            shift 2
            ;;
        -r|--rodadas)
            argumento_rodadas=$2
            shift 2
            ;;
        --comando-cliente|-c)
            comando_cliente=$2
            shift 2
            ;;
        --comando-servidor|-s)
            comando_servidor=$2
            shift 2
            ;;
        --preparo-antes)
            preparo_antes=$2
            shift 2
            ;;
        --receita)
            arquivo_receita=$2
            shift 2
            ;;
        *)
            echo "Argumento inválido: $1"
            ajuda
            exit 1
            ;;
    esac
done

LANG=C
LC_ALL=C

# Cores
vermelho="\033[1;31m"
verde="\033[1;32m"
amarelo="\033[1;33m"
ciano="\033[1;36m"
rosa="\033[1;95m"
normal="\033[0m"
duracao_padrao=10
duracao=${duracao_padrao}
quantidade_rodadas_padrao=2
rodadas=${quantidade_rodadas_padrao}

verifica_dependencias

if [ -z "$apelido" ]; then
    argumentos_faltantes+=("Apelido do teste")
fi

if [ -z "$comando_cliente" ]; then
    argumentos_faltantes+=("Comando do cliente")
fi

if [ -z "$comando_servidor" ]; then
    argumentos_faltantes+=("Comando do servidor")
fi

if [ ${#argumentos_faltantes[@]} -gt 0 ]; then
    if [ ${#argumentos_faltantes[@]} -lt 2 ]; then
        text_argumentos_faltantes="o seguinte argumento está faltando"
    else
        text_argumentos_faltantes="os seguintes argumentos estão faltando"
    fi

    echo -e "\n${vermelho}Erro: ${text_argumentos_faltantes}:${normal}"
    for argumento in "${argumentos_faltantes[@]}"; do
        echo -e "${vermelho}  - $argumento${normal}"
    done
    ajuda
    exit 1
fi

# Tenta obter a duração da rodada do comando do cliente
duracao_comando_cliente=$(obtem_duracao_do_comando_iperf "$comando_cliente")
if [ -n "$duracao_comando_cliente" ] && [ "$duracao_comando_cliente" -gt $duracao_padrao ]; then
    duracao=$duracao_comando_cliente
fi

if [ -n "$arquivo_receita" ]; then
    if [ ! -f "$arquivo_receita" ]; then
        echo -e "${vermelho}Erro: arquivo de receita não encontrado: $arquivo_receita${normal}"
        exit 1
    fi

    conteudo_receita=$(cat "$arquivo_receita")
    descricao_receita=$(obtem_descricao_receita "$conteudo_receita")
    nome_receita=$(obtem_nome_receita "$conteudo_receita")

    rodadas_receita=$(obtem_rodadas "$conteudo_receita")
    if [ -n "$rodadas_receita" ] && [ "$rodadas_receita" -gt $quantidade_rodadas_padrao ]; then
        rodadas=$rodadas_receita
    fi

    duracao_receita=$(obtem_tempo_da_rodada "$conteudo_receita")
    if [ -n "$duracao_receita" ] && [ "$duracao_receita" -gt $duracao_padrao ]; then
        duracao=$duracao_receita
    fi
fi

if [ -n "$argumento_rodadas" ] && [ "$argumento_rodadas" -gt $quantidade_rodadas_padrao ]; then
    rodadas=${argumento_rodadas}
fi

if [ -n "$argumento_duracao" ] && [ "$argumento_duracao" -gt $duracao_padrao ]; then
    duracao=${argumento_duracao}
fi

dir_este_script=$(dirname $(realpath $0))

if [ ! -d $dir_este_script/resultados ]; then
    mkdir $dir_este_script/resultados
fi

rm -rf $dir_este_script/resultados/$apelido
mkdir -p $dir_este_script/resultados/$apelido

# mata_processos
# sobe_cenario

echo -e "\n##################################################\n"
echo -e "\nInício: $(date '+%Y-%m-%d %H:%M:%S')\n" > $dir_este_script/resultados/$apelido/$apelido-experimento.log
echo -e "Os resultados do experimento serão salvos em: ${verde}${dir_este_script}/resultados/${apelido}${normal}"
echo -e "Quantidade de rodadas: ${verde}${rodadas}${normal}"
echo -e "Duração de cada rodada: ${verde}${duracao} segundos${normal}"

for rodada_atual in $(seq 1 $rodadas); do
    roda_teste "$rodada_atual" "$comando_cliente" "$comando_servidor" "$duracao"
done
echo

# mata_processos

echo -e "\nFim: $(date '+%Y-%m-%d %H:%M:%S')" > $dir_este_script/resultados/$apelido/$apelido-experimento.log