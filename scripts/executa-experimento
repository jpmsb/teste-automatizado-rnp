#!/bin/bash

# Arquivo: executa-experimento

ajustes(){
    echo -e "\n${verde}Aplicando ajustes...${normal}\n"
}

verifica_dependencias(){
    # Verifica se as dependências do sistema necessárias estão instaladas
    dependencias=(numactl python3 jq)
    dependencia_faltante=()

    for dependencia in ${dependencias[@]}; do
        if ! command -v $dependencia &> /dev/null; then
            dependencia_faltante+=($dependencia)
        fi
    done

    if [ ${#dependencia_faltante[@]} -gt 0 ]; then
        echo -e "${vermelho}Erro: as dependências necessárias não estão instaladas:${normal}"
        for dependencia in ${dependencia_faltante[@]}; do
            echo -e "${vermelho}  - $dependencia${normal}"
        done
        exit 1
    fi

    # Verifica se as dependências do Python necessárias estão instaladas
    modulos=(pandas matplotlib.pyplot numpy sys json csv re)
    modulos_false=()

    for modulo in ${modulos[@]}; do
        if ! python3 -c "import $modulo" &> /dev/null; then
            modulos_false+=($modulo)
        fi
    done

    if [ ${#modulos_false[@]} -gt 0 ]; then
        echo -e "${vermelho}Erro: as dependências necessárias não estão instaladas:${normal}"
        for modulo in ${modulos_false[@]}; do
            echo -e "${vermelho}  - $modulo${normal}"
        done
        exit 1
    fi
}

# Executa o script que prepara o cenário
sobe_cenario(){
    local script_preparatorio="$1"

    bash $script_preparatorio > /dev/null 2>&1
}

mata_processos(){
    echo "Limpando processos antigos..."
    pkill -f iperf3 -9
}

contagem_regressiva(){
    valor_inicial=$1
    texto="$2"

    for i in $(seq $valor_inicial -1 1); do
        printf "\033[K"
        printf "$texto ${ciano}[Tempo restante: $i]${normal}\r"
        sleep 1
    done

    printf "\033[K"
    printf "$texto"
    echo
}

roda_teste(){
    local rodada_atual="$1"
    local comando_cliente="$2"
    local comando_servidor="$3"
    local nucleo_servidor=0
    local nucleo_cliente=0
    local nucleo=0
    local texto_banda=""
    local args_extras=""

    local banda=$(echo $comando_cliente | grep -oP '(?<=-b\s?)(\d+)([MG]?)' | tail -1)
    local quantidade_fluxos=$(echo $comando_cliente | grep -oP '(?<=-P\s?)(\d+)' | tail -1)

    local duracao=$(echo $comando_cliente | grep -oP '(?<=-t\s?)(\d+)' | tail -1)

    if [ -z "$duracao" ] || [ "$duracao" -eq 0 ]; then
        duracao=10
        args_extras="-t $duracao"
    fi

    # Obtendo o núcleo do servidor através do comando do servidor
    nucleo_servidor=$(echo $comando_servidor | grep -oP '(?<=-A\s?)(\d+)' | tail -1)

    if [ -z "$nucleo_servidor" ]; then
        # Obtendo o núcleo do servidor através do comando do cliente
        nucleo=$(echo $comando_cliente | grep -oP '(?<=-A\s?)(\d+,\d+)' | tail -1)

        if [ -n "$nucleo" ]; then
            if [[ $nucleo =~ ^[0-9]+,[0-9]+$ ]]; then
                # Se o núcleo estiver no formato "nucleo_cliente,nucleo_servidor"
                nucleo_cliente="$(echo $nucleo | cut -d',' -f1)"
                nucleo_servidor="$(echo $nucleo | cut -d',' -f2)"
            else
                # Se houver apenas um número, é o do cliente
                nucleo_cliente="$nucleo"
            fi
        fi
    fi

    if [ -z "$banda" ]; then
        texto_banda=", sem limite de banda"
    else
        texto_banda=", com banda de ${banda}"
    fi

    echo -e "\n##################################################"
    echo -e "\n${verde}Executando a rodada $rodada_atual do teste de $duracao segundos${texto_banda}...${normal}\n"
    mkdir -p $dir_este_script/resultados/$apelido/rodada_$rodada_atual

    echo -e "${amarelo}Iniciando o servidor no núcleo ${nucleo_servidor}...${normal}"
    $comando_servidor -J --one-off > $dir_este_script/resultados/$apelido/rodada_$rodada_atual/rodada_$rodada_atual-${apelido}-iperf3_server.json &

    sleep 1
    echo -e "${amarelo}Preparando o mpstat...${normal}"
    numactl -C 0 $dir_este_script/mpstat-trigger $duracao $dir_este_script/resultados/$apelido/rodada_$rodada_atual rodada_$rodada_atual-${apelido}-mpstat.log 2>/dev/null &

    sleep 1
    $comando_cliente $args_extras -J > $dir_este_script/resultados/$apelido/rodada_$rodada_atual/rodada_$rodada_atual-${apelido}-iperf3_client.json &

    contagem_regressiva $duracao "${amarelo}Iniciando o cliente no núcleo ${nucleo_cliente}...${normal}"
    wait $(jobs -p)

    sleep 1
    # Processa os resultados para CSV
    $dir_este_script/iperf-json-to-csv $dir_este_script/resultados/$apelido/rodada_$rodada_atual/rodada_$rodada_atual-${apelido}-iperf3_server.json > $dir_este_script/resultados/$apelido/rodada_$rodada_atual/rodada_$rodada_atual-${apelido}-iperf3_server.csv 2>/dev/null

    $dir_este_script/iperf-json-to-csv $dir_este_script/resultados/$apelido/rodada_$rodada_atual/rodada_$rodada_atual-${apelido}-iperf3_client.json > $dir_este_script/resultados/$apelido/rodada_$rodada_atual/rodada_$rodada_atual-${apelido}-iperf3_client.csv 2>/dev/null

    cat $dir_este_script/resultados/$apelido/rodada_$rodada_atual/rodada_$rodada_atual-${apelido}-mpstat.log | $dir_este_script/mpstat_to_csv.py > $dir_este_script/resultados/$apelido/rodada_$rodada_atual/rodada_$rodada_atual-${apelido}-mpstat.csv
    echo -e "\n##################################################\n"
}

LANG=C
LC_ALL=C

# Cores
vermelho="\033[1;31m"
verde="\033[1;32m"
amarelo="\033[1;33m"
ciano="\033[1;36m"
rosa="\033[1;95m"
normal="\033[0m"

# Processar os argumentos
while [[ $# -gt 0 ]]; do
    argumento=$1
    case $argumento in
        -a|--apelido)
            apelido=$2
            shift 2
            ;;
        -t|--duracao)
            duracao=$2
            shift 2
            ;;
        -r|--rodadas)
            rodadas=$2
            shift 2
            ;;
        --comando-cliente|-c)
            comando_cliente=$2
            shift 2
            ;;
        --comando-servidor|-s)
            comando_servidor=$2
            shift 2
            ;;
        --script-inicial)
            script_inicial=$2
            shift 2
            ;;
        *)
            echo "Argumento inválido: $1"
            exit 1
            ;;
    esac
done

if [ -z "$duracao" ]; then
    duracao=10
fi

if [ -z "$rodadas" ]; then
    rodadas=1
fi

dir_este_script=$(dirname $(realpath $0))

if [ ! -d resultados ]; then
    mkdir resultados
fi

rm -rf $dir_este_script/resultados/$apelido
mkdir -p $dir_este_script/resultados/$apelido

verifica_dependencias
# mata_processos
# sobe_cenario

for rodada_atual in $(seq 1 $rodadas); do
    roda_teste "$rodada_atual" "$comando_cliente" "$comando_servidor"
done

# mata_processos

echo -e "\nFim: $(date '+%Y-%m-%d %H:%M:%S')" > $dir_este_script/resultados/$apelido/$apelido-experimento.log